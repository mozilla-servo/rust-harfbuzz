language: rust

cache: cargo

matrix:
  include:

    - name: stable, Linux, shared library
      os: linux
      rust: stable
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
         - PREFIX=/usr/local
         - CC=gcc-5
         - CXX=g++-5
      install:
        # Install harfbuzz from the source in harfbuzz-sys. Use an out-of-tree
        # build to avoid contaminating the source tree.
        - make -f $TRAVIS_BUILD_DIR/harfbuzz-sys/makefile.touch touch
            HARFBUZZ=$TRAVIS_BUILD_DIR/harfbuzz-sys/harfbuzz
        - pushd $(mktemp -d)
        - $TRAVIS_BUILD_DIR/harfbuzz-sys/harfbuzz/configure --prefix=$PREFIX
            --without-icu --without-freetype --without-glib
        - make
        - sudo make install
        # Make harfbuzz  available for linking and confirm expected location
        - export LD_LIBRARY_PATH="$(pkg-config --variable=libdir harfbuzz)" &&
            [[ "$LD_LIBRARY_PATH" == "$PREFIX/lib" ]]
        - popd

    - name: stable, Linux, static linking, no pkg-config
      os: linux
      rust: stable
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
         - HARFBUZZ_SYS_NO_PKG_CONFIG=1
         - CC=gcc-5
         - CXX=g++-5
      before_script:
        # Test the harfbuzz-sys package build to check the 'exclude's. We should
        # do this where the embedded harfbuzz is statically linked, but we don't
        # need to do it for every environment.
        - cargo package --manifest-path=harfbuzz-sys/Cargo.toml

    - name: stable, macOS, static linking
      os: osx
      rust: stable

    - name: nightly, Linux, static linking
      os: linux
      rust: nightly
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
         - CC=gcc-5
         - CXX=g++-5

before_script:
  # Download all dependencies to speed up the other stages.
  - cargo fetch

script:
  # Build all crates in the workspace
  - cargo build --all
  # Test all crates in the workspace
  - cargo test --all
  # Run the ctest-generated tests
  - cargo run --manifest-path=harfbuzz-sys-test/Cargo.toml
